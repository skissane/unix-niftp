/* unix-niftp lib/ipcs/csinterface.h $Revision: 5.5 $ $Date: 90/08/01 13:35:52 $ */
/*
 ***********************************************************************
 * clean and simple       January 1982                                 *
 * module:                                                             *
 *      csinterface.h - header file for using clean and simple         *
 *                                                                     *
 * by:     University College London                                   *
 ***********************************************************************
 *   5-mar-82	increase address lengths to 80	    rm
 *  11-Jul-83	Large recive flow expected	  plh
 * $Log:	csinterface.h,v $
 * Revision 5.5  90/08/01  13:35:52  pb
 * Distribution of Aug90RealPP+sequent: Full PP release and support for Sequent X.25 board
 * 
 * Revision 5.2  89/01/13  14:47:38  pb
 * Distribution of Jan89SuckMail: Support Sucking of mail
 * 
 * Revision 5.0  87/03/23  03:42:33  bin
 * Merger of latest UCL and Nottingham versions together with
 * an extensive spring clean.
 * Now UNIX-NIFTP prerelease.
 * 
*/
#define CS_SIG          15      /* signal generated by network event */
#define CS_BUFSIZ       10     /* Define L2BUFL in terms of this !!!! */

#define CS_INTBIT             1
#define CS_RESETBIT           2
#define CS_CLOSEDBIT          4
#define CS_ABORTBIT         010
#define CS_T_OUTBIT         020
#define CS_REJECTBIT        040
#define CS_DATABIT         0400
#define CS_OPENBIT        01000
#define CS_RECVBIT       010000         /* large receive flow expected */
#define CS_WAITBIT       020000
#define CS_SPECIALBIT    040000
#define CS_PUSHBIT      0100000

struct cs_flags {
	int     cs_int    :1,
		cs_reset  :1,
		cs_closed :1,
		cs_abort  :1,
		cs_t_out  :1,
		cs_reject :1,
			  :2,
		cs_data   :1,
		cs_open   :1,
			  :2,
		cs_recv   :1,
		cs_wait   :1,
		cs_special:1,
		cs_push   :1;
		};

#define CSE_INVUID      - 2
#define CSE_INVDESTAD   - 3
#define CSE_2MANYCONS   - 4
#define CSE_INVCONID    - 5
#define CSE_INVBUFFCNT  - 6
#define CSE_INVRESET    - 7
#define CSE_RESOURCES   - 8
#define CSE_NPBOTCH     - 9
#define CSE_STATER      - 10

#define USER_IDL        80
#define DEST_ADDL       80

struct  netnode
	{
	int     conection_id;
	int     timeout;
	int     flags;
	char    *read_buffer;
	char    *write_buffer;
	int     read_count;
	int     write_count;
	char    *user_id;
	char    *destination_address;
	int     telegramdata;
	};


extern  ncserrs,cserr;
extern  char    *cserrors[];
