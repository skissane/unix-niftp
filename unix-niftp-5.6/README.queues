One of the tailoring functions that you have to perform is on the
network information.  This falls into three sections: the NET entries
which define the queues themselves, the QUEUE entries which define the P
processes (making outgoing calls) and LISTEN entries which define the Q
processes (listeners).

The NETWORK entry defines the name of the network, the queue it uses for
outgoing [P] traffic (queue), the addressing information used for
outgoing traffic (address), whether the network is local [used in cpf]
(local), the string to display as the network (show=<network>)

The address string has a % interpretation with replaces the characters as
follows:
E	calling YBTS
D	called DTE
N	calling NSAP [ taken from PADDRTYPE -- may be partial or whole NSAP ]
T	called YBTS
O	OURNAME [tailorable] (usually the first part of the calling YBTS)
X	that's the end of the calling address, now for the called

The result should be two strings (separated by the %X) which are passed
to the relevant code to open a network connection.
Some interfaces need extra info. E.g. the dexpand needs a leading
channel identifier, giving ...%XA%D/%T to indicate channel A.
The X25B code replaces the called DTE (which is generated by the x25
bridge itself) with the host and port info of the relevant bridge, e.g.
x25-bridge2,spad/%E...


The QUEUE entry defines the programme to be invoked to start a P process
for a particular network (prog), along with the debugging level (level),
stats file (statfile=$LODGIR/stat.p<name>), the directory (dir=<qname>)
and database [not used] (dbase).


The LISTEN entry specifies the programme to be run to listen for
incoming Q requests(prog), the address (usually YBTS string) on which to
listen (address), the channel with which it is associated (channel),
along with debugging level (level), the logfile
(logfile=$LOGDIR/log.q<name>), the default info message (infomsg=),
options [see below] (opts), network character to prefix to calling
address before performing NRS lookup (e.g. j or p) (nchar=<first char of
channel name>), stats file [not used] (statfile=$LOGDIR/log.q<name>).

The options (opts) available are:
reject:		always reject -- this is a duff channel.
complain:	complain about short addresses (<12 digits)
creject:	reject duff calling addresses [not used]
reverse:	reject if reverse map fails

Some systems (e.g. SunLink) are handled slightly differently, in that
the Q processes are not invoked by ftpspool and wait listening for
incoming calls, but are invoked by the ybts listener when the relevant
call arrives.  This mean that the address and prog info are not used.
However, the entries MUST be present.
Note that due to limitations in the SUN ybtsd, no arguments can be passed
to the sun listener. As the program needs to know the queue which it is
servicing, this is passed as the name by which it is called.
This is done by actually invoking (e.g.) /usr/lib/niftp/lj which was
created by typying "ln -s qsun /usr/lib/niftp/lj" [ machines without
symbolic links can use hard links, but great care must be taken each time
a new qsun is installed that all the link refer to the new binary.
The script create.sun.links can be used to generate suitable commands
e.g. "sh create.sun.links < /etc/niftptailor | sh"

Some systems interpret the Yellow Book to indicate that listening on the
address FTP will accept calls with a YBTS called address of FTP (e.g.
the original Yorkbox) whereas other will accept calls for any YBTS
called address STARTING with FTP (e.g. GEC 63/40 Yorkbox, DEXPAND).  The
former systems should have a comma separated list of addresses, e.g.
"FTP,FTP.MAIL,FTP.NEWS"; in the latter case it is not possible to have
separate listeners for FTP and MAIL (unless you register different
leading strings for the various contexts).


For a janet host, the network janet  should have the entries:

NET	janet	queue=qj,address="000012345678/%E%X%D/%T"
QUEUE	qj	prog=ptype
LISTEN	lj	prog=qtype,address="FTP",channel=janet

More complicated is a pss host which is on it's own network,
with two janet listeners

NET	janet	queue=qj,address="23421234567890/%O.%E%XB2342235191969/%D.%T"
QUEUE	qj	prog=ptype
LISTEN	ljf	prog=qtype,address="FTP",channel=janet
LISTEN	ljn	prog=qtype,address="FTP.NEWS",channel=janet
LISTEN	ljm	prog=qtype,address="FTP.MAIL",channel=janet
LISTEN	ljo	prog=qtype,address="FTP.MAIL",channel=janet


If non-standard listening addresses are used, it is necessary to tell
the code to which service each address corresponds. This is done using
the QADDRTYPE key which gives a list of address,service pairs.
For example, during the transition to unix-niftp, it is common to listen
on niFTP, niFTP.MAIL, etc, so the listen line of
LISTEN	lj	prog=qtype,address="niFTP",channel=janet
would need the corresponding entry
QADDRTYPE	niftp, ftp, niftp.mail,mail ftp.news,news
[ the corresponding entry PADDRTYPE specifies the called address info to
  be used by the P process for outgoing calls
]

[[ creject REALLY not used ?
   Use of N_LOCAL on cpf (anywhere else) ?
   Use of show  (i.e net)

   Why is so much of the P info in NET when it should be in QUEUE (which
   ought to be renamed as something else -- it confuses qrt P/Q process!

   It should be:
   CHANNEL	cname	[show=zz]
   LISTEN	lname	channel=cname,address=xx,prog=yy
   ?		?name	channel=cname,address=xx,prog=yy

   or am I missing something.
   There can be multiple LISTENs for a channel.
   Is there any meaning for multiple ?s for a channel ??
   At the moment there can be multiple NETs with the same QUEUE ..
   Does this make sense ?
   It allows different "channel" (as they are called in cpf etc!) to be
   given, e.g. "cpf xx yy@ch1/mc" and yy@ch2/mc, but if they both get
   put into the same directory (as they have the same queue name), they
   will both be processed with the same programme, as ftpspool ACTUALLY
   passes over the queue name to prog, not the net!
]]
